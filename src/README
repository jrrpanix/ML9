For using nltk in pyton it needs a bunch of stuff downloaded
To download it start a python session

python
>>> import nltk
>>> nltk.download() # this will cause a window to pop up and select all to downlaod everything
>>> quit()


Decision.py
 - reads in RatesDecision.csv
 - creates a pandas data frame
 - with following columns 
    names = ["minutes_date","publish_date","before","after","decision","flag","change"]
 - date types are  datetime.datetime
 - Primary Usage:creating RatesDecision pandas dataframe
   from Decision import GetDecisionDF
   HIST = GetDecisionDF(RatesDecisionFile)
 - Secondary usage: can also run as a main to plot of the Fed Decision Responses
   python ./Decision.py -p # will plot the decisions on graph

CreateDocumentMatrix.py
 - updated version of documentMatrix.py
 - inputs RatesDecision.csv , paths = ['../text/minutes/','../text/statements/','../text/speeches/']
 - has error checking 
 - default usage ./CreateDocumentMatrix.py -o <your_output_file>

documentMatrix.py 
 - contains regex code to normalize text, 
    i.e. remove punctuation, remove non-utf8 characters, 
    convert what looks likes a percentage (3 percent) to the word 'percenttarget', 
    among others

fedActionFromTargetRate.py 
 - calculates the rate decisions based off of data from the FRED (St Louis) database - 
    it generates a 7 column csv file 
    (Date, Minutes, rate before, rate after, action, flag, amount of change)

textScraper.py
   - Scrapes the www.federalreserve.gov website for speeches, minutes, and statements
   - Multiple functions to separately scrape minutes, speeches, and statements from different time periods
   - Primarily uses regex to determine what portion of the webpage to scrape, this is useful for javascript rendered pages and the minutes pages where there is a fair amount of extraneous text

fedActionFromTargetRate.py
   - This file implies the target rate from daily target FED funds data scraped from FRED (St Louis Fed economic data)
   - The file leverages the date of the statements and minutes .txt files to determine if any given day is a Fed day
   - After 2017, the determination for FED rate action from the target rate changes is slightly different than pre 2017 dates
   
organizeDocuments.py
   - Organizes documents by row - after pre-processing the text using regular expressions
   - Originally written with numpy, will switch to pandas

model3_nn.py
   example usage
   --layers sepcified layers in nn
   for example 
   --layers 40,40              # is a nn model with 2 hidden layers with 40 input nodes
   --layers 20 20,25 20,25,40  # runs 3 separate models model1 has hidden_layers=(10), model2 hidden_layers=(20,25) and model3 hidden_layers=(20,25,40)

   this command line will run a nn with 2 hidden layers on anagrams 1,1 ... 80,80
   time python ./model3_nn.py --layers 40,40  --data speeches statements minutes --ngram 1,1 2,2 3,3 5,5 10,10 15,15 20,20 30,30 40,40 60,60 80,80 --stack --max_iter 100 --output ./output_nn40_40.csv

# for installing pytorch stuff
  conda install pytorch torchvision -c soumith
  For NerualNetModel
  pip install torchtext
